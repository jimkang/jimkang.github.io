<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jimkang.com</title>
    <atom:link href="http://jimkang.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://jimkang.com</link>
    <description>It's dot com.</description>
    <pubDate>Sat, 31 May 2014 20:00:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Sunday Moseying</title>
      <link>http://jimkang.com/articles/sunday-moseying/</link>
      <pubDate>Sat, 31 May 2014 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://jimkang.com/articles/sunday-moseying/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;section class=&quot;center-img-zone&quot;&gt;
  Here’s some stuff we saw while walking around North Cambridge and thereabouts Sunday morning.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14341308253/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm3.staticflickr.com/2903/14341308253_c75873731c_c.jpg&quot; alt=&quot;Sunday moseying&quot; /&gt;&lt;/a&gt;
&lt;/section&gt;
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;center-img-zone&quot;&gt;

&lt;p&gt;  Something I really like about this neighborhood is that seems to have no one telling you your house has to be beige or whatever. You can paint your house however you like. It seems unlikely we’ll be able to afford to own in this area, but if we do, I want the house to be nice and saturated like this powerful yellow one.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14321073655/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5547/14321073655_992f05a8e0_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  In a similar vein, I like that you can basically have a meadow by your house (presumably) without complaints about dandelions.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14321110075/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5530/14321110075_755b39c01c_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  Katt (contemplating the tree above) says this is some variant of dogwood, except with wide, flat petals. They almost form a plane. I am into that.&lt;/p&gt;
&lt;p&gt;  &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;  There’s these lofts that you can see from the Alewife Linear Park/Minuteman Bikeway that we call “Expensive Lofts.” I think the development is actually called either Tannery Brook Row or Davis Lofts. (A friend of ours told us pointed out that &lt;a href=&quot;http://en.wikipedia.org/wiki/Tanning&quot;&gt;tanneries&lt;/a&gt; are actually fairly toxic, so it’s like this place is actually built on some poison burial grounds. If you don’t eat plants grown in the soil, you’re probably fine, though.)&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14317718821/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm3.staticflickr.com/2939/14317718821_4147c41344_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  We checked out the other side of it today, and it’s kinda nifty. There’s little ponds and gardens. This picture has some really out-of-control exposure, but some of the passages look like some kinda wooded elf town.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14134420119/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5114/14134420119_69b29bcd8f_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  There’s the ruins of a small house. In front, there are the matching ruins of a driveway. Perhaps there was some contention between that house and its bigger neighbor; small house lost. The big house razed the small house to its foundations, leaving just a bit standing as a monument to its power.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14134529817/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm3.staticflickr.com/2926/14134529817_9b62be418b_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  I liked this secret porch set up. You can enjoy the outside while not being obvious to passersby. Wearing the proper camo, you could possibly even be invisible.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14317713991/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm3.staticflickr.com/2930/14317713991_e49c74cc95_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  This was a pretty cool contrail.  &lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14297907336/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5233/14297907336_c5d137a9ae_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  A tree with a chunk missing by Davis Station. Was this tree struck by lightning? I thought it may have been &lt;a href=&quot;https://www.flickr.com/photos/ignignokt/8674311065/&quot;&gt;this tree&lt;/a&gt;, but that was a different one, blown over by the wind.&lt;/p&gt;
&lt;p&gt;  &lt;a class=&quot;img-container&quot; href=&quot;https://www.flickr.com/photos/ignignokt/14134386578/in/set-72157644546343690&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5315/14134386578_1edd0bd69c_c.jpg&quot; alt=&quot;Sunday moseying&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  Things were very dappled today. So much dappling!&lt;/p&gt;
&lt;p&gt;&lt;/section&gt;
&lt;br /&gt;
BTW, if you also have a static html blog like this one and a Flickr account and want to put together a photo post with them, you may find it can be kind of annoying to get all the picture links you want out of a photo set. So, I wrote &lt;a href=&quot;https://github.com/jimkang/flickrset-to-html&quot;&gt;flickrset-to-html&lt;/a&gt; to do that for me, then just posted the resulting html into this post.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Between 480,000 and 960,000</title>
      <link>http://jimkang.com/articles/between-480000-and-960000/</link>
      <pubDate>Sat, 17 May 2014 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://jimkang.com/articles/between-480000-and-960000/</guid>
      <author></author>
      <description>&lt;style&gt;
  .tagbox {
    font-size: 32px;
  }

  .pipe {
    fill: hsla(0, 100%, 0%, 0.0);
    stroke-width: 1;
    stroke: #888;
  }

  svg {
    font-size: 20px;
  }

  svg text {
    fill: #585858;
  }

  .station {
    stroke: #777;
    stroke-width: 3;
    fill: #fff;
  }

  .station-label {
    font-size: 24px;
    text-align: center;
    text-anchor: middle;
  }

  #block-layer text {
    fill: hsl(0, 60%, 60%);
  }
&lt;/style&gt;

&lt;p&gt;I’ve been working on a &lt;a href=&quot;https://github.com/jimkang/roguemap-parse-stream&quot;&gt;simple streaming parser&lt;/a&gt; for plain text maps. While writing the browser example (I originally wrote it for Node), I began to wonder if I could use the &lt;a href=&quot;https://github.com/substack/stream-handbook&quot;&gt;Power of Streaming&lt;/a&gt; to use it to render some really huge maps.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
I gave it a map file with about 16 million entities that were each to render to three SVG entities. After fiddling with each of the streams involved to make them respect backpressure, I was able to keep the browser responsive for a while while it rendered these entities. However, at some point, the page would inevitably become unresponsive and the tab would crash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who to blame?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I stepped away from the JavaScript and made a huge static HTML file. It has 960,000 SVG &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; elements, each containing a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Chrome 34.0.1847.131 quits on it (“Aw, Snap!” page) on a Mac running Mavericks with a 2.8 GHz Core i7 and 16 GB RAM. &lt;a href=&quot;https://dl.dropboxusercontent.com/u/263768/lotsofelements.html&quot;&gt;You can try it yourself.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(However, Chrome &lt;em&gt;will&lt;/em&gt; successfully load a page with 480,000 &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;s!)&lt;/p&gt;
&lt;p&gt;So, if you find yourself having to create this many elements via JavaScript, keep in mind that &lt;em&gt;the fans may scream because of sheer rendering stress, not necessarily because there’s something wrong with your code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Streaming into a lagoon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think there’s a lesson here about streaming as well. Streams are about processing data a manageable chunk at a time, but if you can’t dispose of those chunks after you’re done with them, those chunks pool up, and the chunk-at-a-time benefit of streams is negated. &lt;/p&gt;
&lt;p&gt;In the situation I set up &amp;mdash; piping a huge text file to a parser stream, then piping the parsed tokens to a renderer &amp;mdash; streams of text were transformed into streams of token objects which were then transformed into SVG elements. But those SVG elements did not “pass through.” They piled up in the DOM, eating up memory.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;stream-overload-diagram-anchor&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;svg width=&quot;800&quot; height=&quot;600&quot; id=&quot;stream-overload-diagram&quot;&gt;
  &lt;defs&gt;
    &lt;radialGradient id=&quot;sphere-gradient&quot;&gt;
      &lt;stop offset=&quot;0&quot; stop-color=&quot;hsl(30, 100%, 80%)&quot;/&gt;
      &lt;stop offset=&quot;0.75&quot; stop-color=&quot;hsl(20, 100%, 60%)&quot;&gt;
        &lt;animate attributeName=&quot;offset&quot; values=&quot;0.75;0.9;0.75&quot; keySplines=&quot;0.1 0.8 0.2 1; 0.1 0.8 0.2 1; 0.1 0.8 0.2 1&quot; dur=&quot;4s&quot; repeatCount=&quot;indefinite&quot; /&gt;
      &lt;/stop&gt;
      &lt;stop offset=&quot;1&quot; stop-color=&quot;hsl(10, 100%, 50%)&quot;&gt;
        &lt;animate attributeName=&quot;stop-color&quot; values=&quot;hsl(10, 100%, 50%);hsl(40, 100%, 70%);hsl(10, 100%, 50%)&quot; keySplines=&quot;0.1 0.8 0.2 1; 0.1 0.8 0.2 1; 0.1 0.8 0.2 1&quot; dur=&quot;4s&quot; repeatCount=&quot;indefinite&quot; /&gt;
      &lt;/stop&gt;
    &lt;/radialGradient&gt;

    &lt;linearGradient id=&quot;pipe-gradient&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;100%&quot;, y2=&quot;0&quot;&gt;
      &lt;stop offset=&quot;0&quot; stop-color=&quot;hsl(200, 100%, 10%)&quot; /&gt;
      &lt;stop offset=&quot;0.5&quot; stop-color=&quot;hsl(180, 100%, 20%)&quot;&gt;
        &lt;animate attributeName=&quot;offset&quot; values=&quot;0.5;0.9;0.5&quot; keySplines=&quot;0.1 0.8 0.2 1; 0.1 0.8 0.2 1; 0.1 0.8 0.2 1&quot; dur=&quot;10s&quot; repeatCount=&quot;indefinite&quot; /&gt;
      &lt;/stop&gt;
      &lt;stop offset=&quot;1&quot; stop-color=&quot;hsl(200, 100%, 30%)&quot;&gt;
      &lt;/stop&gt;
    &lt;/linearGradient&gt;
  &lt;/defs&gt;
  &lt;g class=&quot;background-layer&quot;&gt;
  &lt;/g&gt;
  &lt;g id=&quot;chunk-layer&quot;&gt;
  &lt;/g&gt;
  &lt;g id=&quot;static-layer&quot;&gt;
    &lt;g&gt;
      &lt;rect id=&quot;reader&quot; x=&quot;30&quot; y=&quot;300&quot; width=&quot;200&quot; height=&quot;120&quot; 
      class=&quot;station&quot; /&gt;
      &lt;text x=&quot;30&quot; dx=&quot;4.2em&quot; y=&quot;300&quot; dy=&quot;2.8em&quot; width=&quot;200&quot; class=&quot;station-label&quot;&gt;Internet requester&lt;/text&gt;
    &lt;/g&gt;

    &lt;g&gt;
      &lt;path d=&quot; M 250 4
                L 440 4
                L 345 154
                Z&quot;
            class=&quot;station&quot;
            id=&quot;parser&quot; x=&quot;250&quot; y=&quot;4&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
      &lt;text x=&quot;250&quot; y=&quot;4&quot; dx=&quot;4em&quot; dy=&quot;2.35em&quot; class=&quot;station-label&quot;&gt;Parser&lt;/text&gt;
    &lt;/g&gt;

    &lt;g&gt;
      &lt;circle id=&quot;renderer&quot; x=&quot;525&quot; y=&quot;175&quot; width=&quot;150&quot; height=&quot;150&quot;
      r=&quot;75&quot; cx=&quot;600&quot; cy=&quot;250&quot; class=&quot;station&quot;&gt;&lt;/circle&gt;
      &lt;text x=&quot;525&quot; y=&quot;175&quot; dx=&quot;3.1em&quot; dy=&quot;2.25em&quot; class=&quot;station-label&quot;&gt;Renderer&lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
  &lt;g id=&quot;block-layer&quot;&gt;
  &lt;/g&gt;

&lt;/svg&gt;  

&lt;p&gt;Not every object benefits from being hit with a hammer, and some situations benefit less than others from having a streaming pattern applied.&lt;/p&gt;
&lt;script src=&quot;d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;basicrequest.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;wordgetter.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;scrollwatcher.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;gravitybox.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;idmaker.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;mover.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;flowcontroller.js&quot;&gt;&lt;/script&gt;
</description>
    </item>
    <item>
      <title>Shirk a lot of work with Approvals</title>
      <link>http://jimkang.com/articles/shirk-work-with-approvals/</link>
      <pubDate>Sat, 26 Apr 2014 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://jimkang.com/articles/shirk-work-with-approvals/</guid>
      <author></author>
      <description>&lt;p&gt;Here’s an ugly thing I think you inevitably run into when writing tests: Having to specify tons and tons of reference values to which to compare test results. Then, wanting to kill yourself.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We use computers in part because they’re good at doing the same thing over and over again. Any person can multiply 9 x 9. (It’s 81.) &lt;a href=&quot;https://www.youtube.com/watch?v=tUY1k7B7hgM#t=00m50s&quot;&gt;A computer can multiply huge numbers.&lt;/a&gt; In fact, they can do this &lt;em&gt;many&lt;/em&gt; times per second.&lt;/p&gt;
&lt;p&gt;Amazing, but what is the by-product of all of this multiplication? Lots and lots of &lt;a href=&quot;http://en.wikipedia.org/wiki/Product_(Mathematics)&quot;&gt;products&lt;/a&gt;, which, &lt;strong&gt;you&lt;/strong&gt;, the programmer, must check for correctness.&lt;/p&gt;
&lt;p&gt;Although it’s likely that you are a multiplication developer doing big things in the multiplication space, for the sake of this post, let’s generalize this to non-multiplication programming. The program’s output need not be multiplication products; it could be, say, strings or objects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var enormousArray = getBigData(ids);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There’s a few ways of testing this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You could sample this array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var firstBigDatum = {
   id: &amp;#39;kjasdflkadsjf&amp;#39;,
   age: 24,
   SSN: &amp;#39;098-876-5432&amp;#39;,
   weaknesses: [
     &amp;#39;bad left knee&amp;#39;,
     &amp;#39;fear of crickets&amp;#39;,
     &amp;#39;corgis&amp;#39;,
     &amp;#39;not the greatest self-esteem&amp;#39;,
   ]
 };

 var lastBigDatum = {
   id: &amp;#39;iwermskldf&amp;#39;,
   age: 38,
   SSN: &amp;#39;876-54-321&amp;#39;,
   weaknesses: [
     &amp;#39;peanut allergy&amp;#39;,
     &amp;#39;double-jointed in elbow (warning: also a strength)&amp;#39;,
     &amp;#39;slow reader&amp;#39;
   ]
 };

 assert.deepEqual(firstBigDatum, enormousArray[0]);
 assert.deepEqual(lastBigDatum, enormousArray[enormousArray.length - 1]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The problem with this is is that you have skipped testing elements &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;enormousArray.length - 2&lt;/code&gt; of that array. That could be a lot of elements. Programmers are known to make mistakes while iterating, so it’s probably best to examine those elements, rather than sweeping them under the rug. (You might not have a big enough rug to do that, anyway.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You could write rules that make “general” assertions against every element in the array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; enormousArray.forEach(function checkDatum(datum) {

   assert.equal(typeof datum.id, &amp;#39;string&amp;#39;);
   assert.equal(typeof datum.age, &amp;#39;number&amp;#39;);
   assert.equal(typeof datum.SSN, &amp;#39;string&amp;#39;);
   assert.equal(datum.SSN.length, 12);
   assert.ok(Array.isArray(datum.weaknesses));
   assert.ok(datum.weaknesses.length &amp;gt; 0);

   datum.weaknesses.forEach(function checkWeakness(weakness) {
     assert.equal(weakness, &amp;#39;string&amp;#39;);
     assert.ok(weakness.length &amp;gt; 0);
   });
 });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is OK. It does make sure that many parts of every object in the array fall within certain bounds. Sometimes when the function being tested is not &lt;a href=&quot;http://en.wikipedia.org/wiki/Deterministic_algorithm&quot;&gt;deterministic&lt;/a&gt;, this is the best you can do. If it is deterministic, though, you are leaving a lot of potential errors unchecked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You could exhaustively check every element in the array. You will then know that the output is completely correct, without a doubt. If what you’re testing is deterministic, then this is the right thing to do.&lt;/p&gt;
&lt;p&gt;Unfortunately, this can be soul crushing.&lt;/p&gt;
&lt;p&gt;Doing this usually involves assembling a huge data file or series of data files that have the ‘golden’ data that the tests will compare to the program’s output. To get that golden data, your options are usually:
&lt;ol class=&quot;alpha&quot;&gt;
&lt;li&gt;
 Hand assemble all of the data. This is unpleasant.
&lt;/li&gt;
&lt;li&gt;
 Copy the data, at least in part, from some reference, then massage it into shape. This is better.
&lt;/li&gt;
&lt;li&gt;
 Log the output of the program, then edit the output for correctness. This is usually the least work, but still a hassle.
&lt;/li&gt; 
&lt;/ol&gt;
However, once you’ve done this, the program or some externality may change, invalidating the golden data. Then, you have to fix it all. If you have to do this each time something changes, &lt;em&gt;you may give up on testing it entirely&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/approvals/Approvals.NodeJS&quot;&gt;Approvals&lt;/a&gt; automates option C. If you are using Node and Mocha, there’s basically &lt;a href=&quot;https://github.com/approvals/Approvals.NodeJS/wiki/Mocha&quot;&gt;two changes&lt;/a&gt; you need to make to your test script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add &lt;code&gt;require(&amp;#39;approvals&amp;#39;).mocha(__dirname + &amp;#39;/where_you_keep_approval_files&amp;#39;);&lt;/code&gt;. This will set up a &lt;code&gt;beforeEach&lt;/code&gt; hook that injects approvals methods like &lt;code&gt;verify&lt;/code&gt; into each test closure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;verify&lt;/code&gt; or &lt;code&gt;verifyAsJSON&lt;/code&gt; in test closures. e.g. &lt;code&gt;this.verifyAsJSON(enormousArray);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;verify&lt;/code&gt; will start compare whatever data you give it with a corresponding file that should contain a snapshot of that data from the last time you ran the test. If it’s the same, then the test passes. If it’s not, a diff app will be launched. In my case, it’s FileMerge.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;fit-to-width&quot; src=&quot;approvalsdiff.png&quot; alt=&quot;diff screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is your chance to review the differences. If the differences are valid (perhaps the result of a valid change in your program), you can accept them by saving over the approvals file with one that includes the changes. If they are not, you can keep the approvals file as it was, and the test will fail because it is the program that is wrong, not the approvals file.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Approvals merges reviewing test errors &amp;mdash; something you have to do anyway &amp;mdash; and updating tests into one process.&lt;/em&gt; That’s pretty smooth, I think.&lt;/p&gt;
&lt;p&gt;I’ve started writing a &lt;a href=&quot;https://github.com/jimkang/reactivecell&quot;&gt;reaction module&lt;/a&gt; for &lt;a href=&quot;http://en.wikipedia.org/wiki/Cellular_automaton&quot;&gt;cellular automata&lt;/a&gt;. (I don’t know what I’m doing yet, in case you’re wondering.) Cellular automata code usually acts on several cells over several iterations. Cell automata are usually deterministic, yet their states can keep changing even after many iterations. So, test-wise, the state of the cells after iteration 80 might be as worthy of examination as their state after iteration 3.&lt;/p&gt;
&lt;p&gt;Checking that many sets of states was daunting, but with Approvals, I was at least able to &lt;a href=&quot;https://github.com/jimkang/reactivecell/blob/master/tests/airtests.js#L105&quot;&gt;easily record the output of 100 iterations&lt;/a&gt;. I’m only testing with five cells in a cross layout right now, but I’ll be testing with much bigger formations of cells later. I’m not too worried about testing them (and later breaking those tests), thanks to this stuff.&lt;/p&gt;
&lt;p&gt;In large part, my test writing becomes this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;duff_inspection_clip.gif&quot; alt=&quot;Fine, fine, mouse, fine, mouse, rat, syringe, fine&quot; class=&quot;do-not-resize&quot; width=&quot;160&quot; height=&quot;118&quot; style=&quot;margin-left: 0.1em&quot;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;This whole post was written from the perspective of a Node developer writing in JavaScript, but there are Approval libraries for &lt;a href=&quot;http://approvaltests.sourceforge.net/&quot;&gt;a whole bunch of other languages&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How quadtrees work</title>
      <link>http://jimkang.com/articles/quadtreevis/</link>
      <pubDate>Mon, 21 Apr 2014 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://jimkang.com/articles/quadtreevis/</guid>
      <author></author>
      <description>&lt;p&gt;An interactive explanation of quadtrees relate to spaces, with some details about D3’s implementation of the quadtree.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Writing Chrome Extensions and bookmarklets that mess with the DOM</title>
      <link>http://jimkang.com/articles/writing-dom-modifying-extensions/</link>
      <pubDate>Sat, 29 Mar 2014 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://jimkang.com/articles/writing-dom-modifying-extensions/</guid>
      <author></author>
      <description>&lt;p&gt;Let’s say you want to vandalize with a web page that you didn’t author. You want to see the New York Times in Comic Sans. Or you want to show only the last letter of every paragraph in the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html&quot;&gt;HIG&lt;/a&gt; to see if there’s some &lt;a href=&quot;http://en.wikipedia.org/wiki/Bible_code&quot;&gt;secret message&lt;/a&gt;. Or perhaps you want to do something useful with the web page.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
One way to do this is open the developer tools in your browser and directly change things in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM&quot;&gt;DOM&lt;/a&gt;. But if you want the world to also be able to do the same, you need to ship a program that does it. For quite a long time, people have been used &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/&quot;&gt;Greasemonkey&lt;/a&gt; scripts in Firefox deliver them.&lt;/p&gt;
&lt;p&gt;On Chrome, &lt;a href=&quot;http://developer.chrome.com/extensions/index&quot;&gt;Chrome extensions&lt;/a&gt; do this. There’s also &lt;a href=&quot;http://en.wikipedia.org/wiki/Bookmarklet&quot;&gt;bookmarklets&lt;/a&gt;, which are less capable but will work across all browsers.&lt;/p&gt;
&lt;p&gt;Here’s a look at what it takes to make a DOM-altering Chrome extension or bookmarklet. (If you know that what you want to do is make a bookmarklet, though, I recommend you just &lt;a href=&quot;http://jimkang.com/articles/writing-dom-modifying-extensions/#contentscript&quot;&gt;skip down to the content script and bookmarklet parts&lt;/a&gt;.)&lt;/p&gt;
&lt;h1&gt;Extension structure&lt;/h1&gt;

&lt;p&gt;A Chrome extension is a package of JavaScript, CSS, and resource files. They’re balled up into a crx file on the Chrome Web Store, but in development, you can load an unpacked directory in &lt;a href=&quot;chrome://extensions&quot;&gt;chrome://extensions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There’s a &lt;a href=&quot;http://developer.chrome.com/extensions/manifest&quot;&gt;manifest.json&lt;/a&gt; that you need to fill out. Salient fields:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;permissions&amp;quot;: [
  &amp;quot;https://twitter.com/*&amp;quot;
],
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tells Chrome that this extension will operate on pages that have URLs that begin with &lt;code&gt;https://twitter.com&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;browser_action&amp;quot;: {
    &amp;quot;default_icon&amp;quot;: {
      &amp;quot;19&amp;quot;: &amp;quot;onebyone_icon_19.png&amp;quot;,
      &amp;quot;38&amp;quot;: &amp;quot;onebyone_icon_38.png&amp;quot;
    }
  },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you specify a &lt;code&gt;browser_action&lt;/code&gt; field, Chrome will put a button in the toolbar for you using the image files you specify. There’s a button click event your script can listen for. You can use this to do something when the user clicks your extension’s button.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;background&amp;quot;: {
  &amp;quot;scripts&amp;quot;: [&amp;quot;node_modules/scriptchain/scriptchain.js&amp;quot;, &amp;quot;background.js&amp;quot;],
  &amp;quot;persistent&amp;quot;: false
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we’re specifying the &lt;a href=&quot;https://developer.chrome.com/extensions/background_pages&quot;&gt;background scripts&lt;/a&gt; we want to have at the ready to respond to user-instigated events. Usually, I have a background.js file which listens for clicks to the extension’s button, then executes scripts in the context of the active tab. Executing scripts in the context of the active tab is kinda like going to the web page you want to mess with, then running code in the JavaScript console.&lt;/p&gt;
&lt;p&gt;Background script example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var scriptchain = createScriptChain(
  [&amp;#39;readability.js&amp;#39;, &amp;#39;parser.js&amp;#39;, &amp;#39;onebyone.js&amp;#39;], null, false
);

chrome.browserAction.onClicked.addListener(function respondToClick(tab) {
  scriptchain.loadChain();
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s registering for the &lt;code&gt;chrome.browserAction.onClicked&lt;/code&gt; event and responding to that event by calling &lt;code&gt;scriptchain.loadChain&lt;/code&gt;. &lt;a href=&quot;https://www.npmjs.org/package/scriptchain&quot;&gt;scriptchain&lt;/a&gt; is a helper I wrote that runs a list of scripts on the active tab in order. It’s a convenience, but alternatively, you can call &lt;a href=&quot;http://developer.chrome.com/extensions/tabs#method-executeScript&quot;&gt;chrome.tabs.executeScript&lt;/a&gt; to run your scripts on the tab.&lt;/p&gt;
&lt;p&gt;To sum up, the flow of execution goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User visits a page that is included in the manifest’s &lt;code&gt;permissions&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Chrome loads the background scripts you specified in the manifest. One of them subscribes to the browser button click event.&lt;/li&gt;
&lt;li&gt;User clicks on the extension button in the Chrome toolbar.&lt;/li&gt;
&lt;li&gt;The background script gets the event and responds by executing a script in the context of the tab.&lt;/li&gt;
&lt;li&gt;That script does some cool stuff with the web page in the tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name=&quot;contentscript&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;The content script: Actually doing stuff to the web page, finally&lt;/h1&gt;

&lt;p&gt;Once you’re finally executing code in the context of the web page, it’s a lot like being at a web page, opening the Web Inspector console, and running code. This is where you do your business, so to speak.&lt;/p&gt;
&lt;p&gt;Typically, you want to select DOM elements, read them and then change them or add to them or delete them. You may want to avoid including a big library like jQuery that abstracts that kind of thing in order to keep things light, especially if you’re going to be creating a bookmarklet version of your extension. Fortunately, the DOM API, while clunkier, is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/document.querySelectorAll&quot;&gt;not really all that different&lt;/a&gt; from the abstraction libraries these days.&lt;/p&gt;
&lt;p&gt;Here’s an example from &lt;a href=&quot;http://jimkang.com/twittershuffle/&quot;&gt;Twitter Shuffle&lt;/a&gt;, an extension and bookmarklet I wrote to shuffle around tweets and their authors for some misattribution fun and confusion. (&lt;a href=&quot;https://github.com/jimkang/twitter-shuffle-chrome-extension&quot;&gt;The unabridged file is here.&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((function shuffleTweets() {
  ...

  var tweetTexts = document.querySelectorAll(&amp;#39;.tweet-text&amp;#39;);
  var tweetContents = [];
  tweetTexts.forEach(function getContents(tweet) {
    tweetContents.push(tweet.innerHTML);
  });
  var shuffledContents = shuffle(tweetContents);

  tweetTexts.forEach(function replaceWithShuffled(tweetText, i) {
    tweetText.innerHTML = shuffledContents[i];
  });

})());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is where you’d do the thing you want to do with the web page. You could do anything here. It’s like a &lt;a href=&quot;http://html5zombo.com/&quot;&gt;Zombo.com&lt;/a&gt; inside of that &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot;&gt;IIFE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;bookmarkletize&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Bookmarkletize&lt;/h1&gt;

&lt;p&gt;So, how would this work as a bookmarklet? You just have get a bookmark created on your users’ browsers that has a URL that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javascript:&amp;lt;Your IIFE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can’t really tell most users “copy this code, then edit a bookmark and paste it into the URL field.” You need to create a web page that has a link that contains your code in the &lt;code&gt;href&lt;/code&gt; and tell them to drag it to the bookmarks bar. Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Drag this to your bookmarks bar:&amp;lt;/p&amp;gt;      
&amp;lt;p&amp;gt;
  &amp;lt;a class=&amp;quot;bookmarklet&amp;quot; href=&amp;quot;javascript:&amp;lt;Your IIFE&amp;quot;&amp;gt;Greatest Bookmarklet of All Time!&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’d be great if bookmarklet installation could be even simpler (some people don’t have their bookmarks bar showing), but I think it’s the best we can do for now.&lt;/p&gt;
&lt;p&gt;To squeeze your IIFE into an &lt;code&gt;href&lt;/code&gt;, you’ll need to crunch it down to one line Minification wouldn’t hurt, either. You can do it by hand, but I recommend your run it through &lt;a href=&quot;https://github.com/mishoo/UglifyJS2&quot;&gt;UglifyJS&lt;/a&gt;. On a Mac, you do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;uglifyjs yourcontentscript.js -m | pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The minified code will be in your pasteboard. You can cmd+V it into your &lt;code&gt;href=&amp;quot;javascript:&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Why even bother with a Chrome extension, then?&lt;/h1&gt;

&lt;p&gt;Well, there’s stuff you can do in a Chrome extension that you can’t do in a bookmarklet. Chrome extensions are also easier to install. At least on Chrome. But yeah, if you know you don’t need any of that, just make a bookmarklet.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>