[
  {
    "id": "getfromlibrary",
    "name": "Get from Library!",
    "links": [
      ["http://jimkang.com/get-from-library", "Get from Library!"]
    ],
    "sources": [
      ["https://github.com/jimkang/get-from-library", "Source on GitHub"]
    ],
    "metalinks": [
    ],
    "tags": [
      "bot"
    ],
    "description": "A bookmarklet that cuts the friction between thinking you'd like to read a book and actually reading it.",
    "date_unfurled": "2016-03-22",
    "date_updated": "2016-03-22",
    "done": "yes"
  },

  {
    "id": "godtributes",
    "name": "@GODTRIBUTES",
    "links": [
      ["https://twitter.com/godtributes/with_replies", "@godtributes"]
    ],
    "sources": [
      ["https://github.com/jimkang/godtributes", "Source on GitHub"]
    ],
    "metalinks": [
      ["http://iloveepoetry.com/?p=12002", "I ♥ E-Poetry essay"]
    ],
    "tags": [
      "bot",
      "language"
    ],
    "description": "A bot that posts tributes to befitting each god! It reads (and watches) its followers' tweets for inspiration. This is my most popular bot.",
    "techinfo": "<b>@godtributes</b> is few Node processes. One maintains a database of what it has replied with and to whom and when it did it. Another is a proxy cache to the Wordnik API. Another generates the standalone tribute tweets. Yet another listens to a Twitter stream in real time and generates (or doesn't) tributes based on incoming tweets' text and images.",
    "date_unfurled": "2014-06-08",
    "date_updated": "2016-02-26",
    "done": "yes"
  },
  {
    "id": "namedlevels",
    "name": "Named Levels",
    "links": [
      ["http://jimkang.com/namedlevels/#/class/library", "Web app"],
      ["https://twitter.com/namedlevels", "Twitter bot"]
    ],
    "sources": [
      ["https://github.com/jimkang/namedlevels-web", "Browser app source"],
      ["https://github.com/jimkang/namedlevels-api", "API source"]
    ],
    "metalinks": [
      ["https://www.metafilter.com/148572/MeFites-gain-1-hp-per-level-after-the-14th", "MetaFilter thread"]
    ],
    "tags": [
      "language",
      "web",
      "bot"
    ],
    "description": "1st Edition Advanced Dungeons & Dragons had <a href=\"http://www.therobotsvoice.com/2009/04/the_12_most_insane_old_school_dungeons_dragons_rul.php\">a charming quirk</a> in it. Every experience level for every class had a different title. Named Levels is a web app that generates those names for any possible \"class\" you could think of.",
    "techinfo": "The web app brings together the old and the new in a couple of ways. Obviously, 1st Edition AD&D and its design language are very old, and web apps are fairly new. Less obviously, since these experience tables are literally tables, it uses the long-maligned table tagged! However, in order to make it work with different window and device sizes, it uses the fairly new flexbox and media queries.",
    "date_unfurled": "2015-04-03",
    "date_updated": "2016-01-11",
    "done": "yes"
  },

  {
    "id": "botinthestreet",
    "name": "Bot in the street…",
    "links": [
      ["https://twitter.com/botinthestreet", "@botinthestreet"]
    ],
    "sources": [
      ["https://github.com/jimkang/street-mode-sheet-mode", "Source on GitHub"]
    ],
    "metalinks": [
    ],
    "tags": [
      "bot"
    ],
    "description": "<p>This bot comes up with different ways to fill out the \"___ in the street but a ___ in the sheets\" snowclone (originating from \"a lady in the street but a freak in the sheets\").</p><p>It picks a random word, then pairs that word with an antonym, rhyme, or cross-reference from the Wordnik API. It seems like that may be too crude to work, but it turns out that the human mind tries pretty hard to connect the dots when it comes to many things, including innuendo.</p>",
    "date_unfurled": "2016-02-20",
    "date_updated": "2016-02-20",
    "done": "yes"
  },

  {
    "id": "sprigot",
    "name": "Sprigot",
    "links": [
      ["http://jimkang.com/sprigot/", "Sprigot"],
      ["http://jimkang.com/sprigot/#/The-Disappearance-of-N/intro", "The Disappearance of N"],
    ],
    "sources": [
      ["https://github.com/jimkang/sprigot-web", "Browser app source"],
      ["https://github.com/jimkang/sprigot-api", "API source"]
    ],
    "metalinks": [
    ],
    "tags": [
      "visualization"
    ],
    "description": "A tree-oriented way of visualizing branching documents written with D3 and Node.",
    "date_unfurled": "2013-09-26",
    "date_updated": "2015-09-02",
    "done": "yes"
  },

  {
    "id": "quadtreevis",
    "name": "Interactive quadtrees",
    "links": [
      ["http://jimkang.com/quadtreevis/", "An interactive explanation of quadtrees"]
    ],
    "sources": [
      ["https://github.com/jimkang/quadtreevis", "Source"]
    ],
    "metalinks": [
    ],
    "tags": [
      "visualization"
    ],
    "description": "When I was building my cellular automaton, I wanted to try storing my cells in quadtrees to save space. It was then that I realized I wasn’t that clear on how quadtrees work, so I built this explanation.",
    "date_unfurled": "2014-04-14",
    "date_updated": "2014-05-05",
    "done": "yes"
  },

  {
    "id": "backagain",
    "name": "Back Again?",
    "links": [
      ["https://chrome.google.com/webstore/detail/back-again/kjponlihgeoeeppkmclokpbijdomjmfg", "Back Again?"]
    ],
    "sources": [
      ["https://github.com/jimkang/backagain", "Source"]
    ],
    "metalinks": [
      ["http://lifehacker.com/back-again-tracks-every-time-you-visit-a-site-1588729519", "Lifehacker review"]
    ],
    "tags": [
      "utility"
    ],
    "description": "A Chrome extension that tells you how many times you've visited the page you're on, right in the button by the URL. Clicking the button gives you a graph showing how many times you've visited the page in the last week.",
    "date_unfurled": "2013-11-18",
    "date_updated": "2013-11-21",
    "done": "yes"
  },

  {
    "id": "nonstopscrollshop",
    "name": "Non-Stop Scroll Shop",
    "links": [
      ["http://nonstopscrollshop.com/", "Non-Stop Scroll Shop!"]
    ],
    "sources": [
    ],
    "metalinks": [
      ["http://algopop.tumblr.com/post/94244798558/non-stop-scroll-shop-by-ghost-crab-workshop-an", "#algopop review"]
    ],
    "tags": [
      "web"
    ],
    "description": "Do you like products? Do you like scrolling? How about infinite scrolling? Well, then! Come on down to Non-Stop Scroll Shop where we'll always have something new for you…forever.",
    "date_unfurled": "2014-02-25",
    "date_updated": "2015-01-04",
    "done": "yes"
  },

  {
    "id": "smidgeo",
    "name": "Smidgeo.com",
    "links": [
      ["http://smidgeo.com/", "Smidgeo.com"]
    ],
    "sources": [
      ["https://github.com/smidgeo/smidgeo.github.io", "Source"]
    ],
    "metalinks": [
    ],
    "tags": [
      "web"
    ],
    "description": "I took on a side contract to build my cat's corporation's web site. Smidgeo is a business built on growth, digital, social, disruption, a proprietary form of smart marketing known as Smidgeo Smarketing. The bottom line? Smidgeo GETS results.",
    "techinfo": "I think the CSS for the animation of Smidgeo swooping in as you scroll is the greatest CSS I've ever done. Also, the animated business plan diagram came from <a href=\"http://jimkang.com/weblog/articles/between-480000-and-960000/\">a demonstration</a> I wrote about the futility of streaming in a certain situation.",
    "date_unfurled": "2014-05-31",
    "date_updated": "2015-05-31",
    "done": "yes"
  },

  {
    "id": "slack-gis",
    "name": "Slack GIS",
    "links": [
      ["https://github.com/jimkang/slack-gis", "Google Images for Slack"]
    ],
    "sources": [
    ],
    "metalinks": [
    ],
    "tags": [
      "web"
    ],
    "description": "I've written a little web service that lets you search Google Image Search from Slack. I've found it to be a good companion to giphy. Here's the code and instructions to set it up.",
    "techinfo": "This project had two interesting problems: 1) Getting search results from Google is a moving target. I started out using a module that used Google's deprecated image search API, and one day, it just stopped working. I ended up writing my own scraper. 2) A lot of Google image search results point to dead images. When you're on Google itself, that's no big deal. You just move on to the next result. On Slack, it's far more disappointing, since you get only one search result. (Multiple results would be overwhelming.) For that reason, I added result auditing, which made it a slower – but still better – experience.",
    "date_unfurled": "2015-09-30",
    "date_updated": "2015-12-03",
    "done": "yes"
  },

  {
    "id": "contingencymsgs",
    "name": "If you are reading this",
    "links": [
      ["https://twitter.com/contingencymsgs", "@contingencymsgs"]
    ],
    "sources": [
      ["https://github.com/jimkang/if-you-are-reading-this", "Source"]
    ],
    "metalinks": [
    ],
    "tags": [
      "bot"
    ],
    "description": "<a href=\"https://twitter.com/metroidbaby\">@metroidbaby</a>, <a href=\"https://twitter.com/notinventedhere\">@NotInventedHere</a>, and I built a Twitter bot that alerts you about various fictional emergency situations.",
    "date_unfurled": "2015-11-30",
    "date_updated": "2016-02-16",
    "done": "yes"
  },

  {
    "id": "monthlydamage",
    "name": "Monthly Damage",
    "links": [
      ["http://jimkang.com/monthlydamage/", "Monthly Damage"]
    ],
    "sources": [
      ["https://github.com/jimkang/monthlydamage", "Source"]
    ],
    "metalinks": [
    ],
    "tags": [
      "web"
    ],
    "description": "Are you trying to buy a house? Well, if so, this tells you how much you'll have to pay each month for it, factoring in taxes and loan terms, so you can immediately find out if a house or condo is just too bonkers for you.",
    "date_unfurled": "2015-10-30",
    "date_updated": "2015-11-02",
    "done": "yes"
  },

  {
    "id": "autocompletejok",
    "name": "knock knock [tab]",
    "links": [
      ["https://twitter.com/autocompletejok", "@autocompletejok"]
    ],
    "sources": [
      ["https://github.com/jimkang/whosthereautocomplete", "Source"]
    ],
    "metalinks": [
      ["http://qz.com/572763/the-best-twitter-bots-of-2015/", "The best Twitter bots of 2015 on Quartz"]
    ],
    "tags": [
      "bot"
    ],
    "description": "This bot creates knock knock jokes by hitting up autocomplete on Google. This is perhaps the dumbest bot of all time. And yet! I am compelled to share <a href=\"https://twitter.com/autocompletejok/status/622711741139451904\">amazing</a> <a href=\"https://twitter.com/autocompletejok/status/623466717050748928\">jokes</a> <a href=\"https://twitter.com/autocompletejok/status/622077560684294145\">like these</a>.",
    "date_unfurled": "2015-07-21",
    "date_updated": "2015-08-31",
    "done": "yes"
  },

  {
    "id": "massdaycare",
    "name": "Massachusetts daycare map",
    "links": [
      ["http://jimkang.com/massdaycare/", "Massachusetts Daycare Map"]
    ],
    "sources": [
      ["https://github.com/jimkang/massdaycare", "Browser app"],
      ["https://github.com/jimkang/daycare-provider-api", "API server"],
      ["https://github.com/masschildcaredata/masschildcaredata.github.io", "Scrapers and data"]
    ],
    "metalinks": [],
    "tags": ["web", "scraping"],
    "description": "Work in progress. This is a map of daycare providers available in the state of Massachusetts. I built it because while daycare search was available from the Mass EEC, there was no map-driven way to browse the daycare available in an area.",
    "techinfo": "The data gets to the user like so: A scraper gathers all of the data available from the Mass EEC site but clicking through hundreds of pages as if it was a user. That data undergoes several transforms, including geocoding and validation. Then, it is stored in a LevelDB database that the API server reads. The server streams the daycare provider data to the browser app, which requests it as the user pans over areas containing those providers. It caches them browser-side in an IndexedDB so that it can retrieve them quickly the next time the user uses the app.",
    "date_updated": "2016-02-15",
    "done": "no"
  },

  {
    "id": "phonemelibraries",
    "name": "Phoneme libraries",
    "links": [
      ["https://github.com/jimkang/phonemenon", "phonemenon"],
      ["https://github.com/jimkang/word-phoneme-map", "word-phoneme-map"],
      ["https://github.com/jimkang/phoneme-sequencer", "phoneme-sequencer"]
    ],
    "sources": [
    ],
    "metalinks": [
    ],
    "tags": [
      "module",
      "language"
    ],
    "description": "<p>Phonemenon is a library for phoneme manipulation and analysis. It's a set of functions that lets you do things like find out what syllables are in a word, how commonly certain syllables follow each other or how often given phonemes follow each other.</p><p>word-phoneme-map lets you look up words that correspond to phoneme sequences and look up phoneme sequences that correspond to words.</p><p>phoneme-sequencer stochastically completes a given partial phoneme sequence by using an analysis of real-world phoneme sequences.</p>",
    "date_unfurled": "2014-10-02",
    "date_updated": "2015-07-06",
    "done": "yes"
  }
]
